## -*- R -*-



options(configure.args = c(Rmpi = "--with-Rmpi-type=OPENMPI"))
                           
#                           rgl = "--with-gl-includes=/usr/include --with-gl-libraries=/usr/lib64",
#                           Rhdf5lib = "--with-zlib=/jhpce/shared/jhpce/core/conda/miniconda3-4.6.14/envs/svnR-3.6.x"))
options(max.print = 1500)

options(repos = c(CRAN= "https://cran.rstudio.com"))

local({
    hname <- system("/bin/hostname", intern = TRUE)
    if(any(grepl("enigma", hname)) || any(grepl("jhpce", hname))) {
        cat("You are running on a login node ... force-quitting\n")
        q("no")
    }
    userLib <- Sys.getenv("R_LIBS_USER")
    userLib <- strsplit(userLib, ":")[[1]]
    userLib <- path.expand(userLib)
    baseLib <- path.expand("~/R")
    defaultLib <- file.path(baseLib,
                            paste0(R.version$platform, "-library"),
                            paste(R.version$major, sub("\\..*", "", R.version$minor), sep = "."))
    thisR <- sub("/R.*", "", sub(".*svnR-", "", R.home()))
    newLib <- file.path(baseLib, thisR)
    if(any(defaultLib %in% userLib)) {
        if(!dir.exists(newLib))
            dir.create(newLib)
        userLib.new <- userLib
        userLib.new[which(userLib.new == defaultLib)] <- newLib
        .libPaths(userLib.new)
        userLib <- userLib.new[1]
    }
    if(interactive()){
        cat("****************************\n")
        cat("** Hopkins NEWS and Notes **\n")
        cat("****************************\n")
        cat("\nNews and updates for the R installation will be sent to bit-help, so consider subscribing\n", fill = TRUE)
        cat("An automatic user library has been created (in case it did not already exist) as\n")
        cat("   ", userLib, "\n")
        cat("install.packages and R CMD INSTALL will automatically install to this directory, so there is no need for a -l or a lib argument to these functions.\n", fill = TRUE)
    }
    if(interactive()) {
        require(utils)
        userPkgs <- as.data.frame(installed.packages(lib.loc = userLib)[, c("Package", "Version"), drop = FALSE],
                                  stringsAsFactors = FALSE)
        getPkgVersion <- function(pkg) {
            fpkg <- find.package(pkg, lib.loc = c(.Library, .Library.site),
                                 quiet = TRUE)
            if(length(fpkg) > 0)
                c(pkg, as.character(packageVersion(pkg, lib.loc = c(.Library, .Library.site))))
            else
                NULL
        }
        if(nrow(userPkgs) > 0) {
            systemPkgs <- do.call(rbind, lapply(userPkgs$Package, getPkgVersion))
            if(!is.null(systemPkgs)) {
                cat("The following packages are installed in both", userLib, "and system-wide\n")
                systemPkgs <- as.data.frame(systemPkgs, stringsAsFactor = FALSE)
                names(systemPkgs) <- c("Package", "System_Version")
                overLap <- merge(userPkgs, systemPkgs, by = "Package")
                names(overLap)[names(overLap) == "Version"] <- "User_Version"
                print(overLap)
                cat("User installed packages will override the system ones, irrespective of version\n")
            } else cat("  none\n")
        }
    }
    if(interactive()) {
        cat("******* End NEWS ***********\n")
    }
})



#### Local Variables:
#### mode: R
#### coding: utf-8
#### End:




